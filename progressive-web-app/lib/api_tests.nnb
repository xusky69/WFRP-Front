{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "const axios = require('axios');\nconst qs = require('qs')"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Parameters"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const username = 'admin'\nconst password = '123'\nconst campaign = '58a53f18-22b6-4d01-84d8-95b037bfd036'\nconst apiUrl = 'http://localhost:8000/'"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Basic auth test"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// try {\n//     const response = await axios.get(apiUrl)\n//     console.log(response.data)\n// } catch (error) {\n//     console.log(error.response.status)\n//     console.log(error.response.data.detail)\n// }\n\ntry {\n    const response = await axios.get(apiUrl, {auth: { username, password } })\n    console.log(response.data)\n} catch (error) {\n    console.log(error.response.status)\n    console.log(error.response.data.detail)\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{",
                                "  campaigns: 'http://localhost:8000/campaigns/',",
                                "  'journal-entries': 'http://localhost:8000/journal-entries/',",
                                "  'playable-characters': 'http://localhost:8000/playable-characters/',",
                                "  items: 'http://localhost:8000/items/',",
                                "  talents: 'http://localhost:8000/talents/',",
                                "  spells: 'http://localhost:8000/spells/'",
                                "}",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Get campaign data"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let response\ntry {\n    response = await axios.get(`${apiUrl}campaigns/?${campaign}`, {auth: { username, password } })\n} catch (error) {\n    console.log(error.response.status)\n    console.log(error.response.data.detail)\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Filter character by campaign"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "\nconst queryString = qs.stringify({\n    campaign__uuid: campaign,\n    user__username: username,\n})\n\ntry{\n    response = await axios.get(`${apiUrl}playable-characters/?${queryString}`, {auth: { username, password } })\n}catch(error){\n    console.log(error.response.status)\n    console.log(error.response.data.detail)\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                " ### Filter journals by campaign"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const queryString = qs.stringify({\n    campaign__uuid: campaign,\n})\n\ntry{\n    response = await axios.get(`${apiUrl}journal-entries/?${queryString}`, {auth: { username, password } })\n}catch(error){\n    console.log(error.response.status)\n    console.log(error.response.data.detail)\n}"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const journalEntries = response.data.map((item: object) => ({name: item.name, entry_text: item.entry_text, creation_date: item.creation_date}))"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "journalEntries[0]"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  name: \u001b[32m'Et harum quidem rerum'\u001b[39m,",
                                "  entry_text: \u001b[32m'At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga'\u001b[39m,",
                                "  creation_date: \u001b[32m'2022-03-30T15:29:56.523680-05:00'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}