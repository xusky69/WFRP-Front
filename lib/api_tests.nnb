{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "const axios = require('axios');\nconst qs = require('qs')"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Parameters"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const username = 'ricardo'\nconst password = 'ricardo_changeme'\nconst campaign = 'ee4081de-2f27-433d-b02d-b123c52e7900'\nconst apiUrl = 'http://localhost:8000/'"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Basic auth test"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// try {\n//     const response = await axios.get(apiUrl)\n//     console.log(response.data)\n// } catch (error) {\n//     console.log(error.response.status)\n//     console.log(error.response.data.detail)\n// }\n\ntry {\n    const response = await axios.get(apiUrl, {auth: { username, password } })\n    console.log(response.data)\n} catch (error) {\n    console.log(error.response.status)\n    console.log(error.response.data.detail)\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{",
                                "  campaigns: 'http://localhost:8000/campaigns/',",
                                "  'journal-entries': 'http://localhost:8000/journal-entries/',",
                                "  'playable-characters': 'http://localhost:8000/playable-characters/',",
                                "  items: 'http://localhost:8000/items/',",
                                "  weapons: 'http://localhost:8000/weapons/',",
                                "  armor: 'http://localhost:8000/armor/',",
                                "  talents: 'http://localhost:8000/talents/',",
                                "  'advanced-skills': 'http://localhost:8000/advanced-skills/',",
                                "  spells: 'http://localhost:8000/spells/',",
                                "  memories: 'http://localhost:8000/memories/',",
                                "  creatures: 'http://localhost:8000/creatures/',",
                                "  'creature-traits': 'http://localhost:8000/creature-traits/'",
                                "}",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Get campaign data"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let response\ntry {\n    response = await axios.get(`${apiUrl}campaigns/?${campaign}`, {auth: { username, password } })\n} catch (error) {\n    console.log(error.response.status)\n    console.log(error.response.data.detail)\n}\n\n// response.data"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const campaignData = {\n    master: response.data[0].master,\n    user: username,\n    name: response.data[0].name,\n    description: response.data[0].description\n  }"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Filter character by campaign"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "\nconst queryString = qs.stringify({\n    campaign__uuid: campaign,\n    // user__username: username,\n})\n\ntry{\n    response = await axios.get(`${apiUrl}playable-characters/?${queryString}`, {auth: { username, password } })\n}catch(error){\n    console.log(error.response.status)\n    console.log(error.response.data.detail)\n}\n\nconst uuidChar = response.data[0].uuid"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.error",
                            "value": {
                                "name": "TypeError",
                                "message": "Cannot read properties of undefined (reading 'uuid')",
                                "stack": "    at <Cell 10> [14, 30]\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async C (/home/shepard/.vscode/extensions/donjayamanne.typescript-notebook-2.0.6/out/extension/server/index.js:2:113337)\n    at async t.execCode (/home/shepard/.vscode/extensions/donjayamanne.typescript-notebook-2.0.6/out/extension/server/index.js:2:114306)"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// response.data.filter((item) => (item.user == campaignData.user))[0]\nresponse.data.filter(item => item.user == username)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  {",
                                "    user: \u001b[32m'ricardo'\u001b[39m,",
                                "    campaign: \u001b[32m'ee4081de-2f27-433d-b02d-b123c52e7900'\u001b[39m,",
                                "    uuid: \u001b[32m'e8bbe74c-1b52-47d1-84b7-9a105c66186c'\u001b[39m,",
                                "    creation_date: \u001b[32m'2022-04-05T11:51:19.841515-05:00'\u001b[39m,",
                                "    last_updated: \u001b[32m'2022-04-05T11:51:23.209743-05:00'\u001b[39m,",
                                "    name: \u001b[32m'Gunnar Hrolfsson'\u001b[39m,",
                                "    character_avatar: \u001b[32m'https://wfrp-api.s3.amazonaws.com/media/gunnar.png?AWSAccessKeyId=AKIAYL5POFDX7AB3CXHG&Signature=QYWp65ud4esMjU8pDozXocdSJjk%3D&Expires=1649195598'\u001b[39m,",
                                "    character_picture: \u001b[32m'https://wfrp-api.s3.amazonaws.com/media/gunnar_full.png?AWSAccessKeyId=AKIAYL5POFDX7AB3CXHG&Signature=krhPkhp%2BWDnw0K%2BV1mhd5S1A6aY%3D&Expires=1649195598'\u001b[39m,",
                                "    species: \u001b[32m'Dwarf'\u001b[39m,",
                                "    character_class: \u001b[32m'Warrior'\u001b[39m,",
                                "    career: \u001b[32m'Slayer'\u001b[39m,",
                                "    career_level: \u001b[32m'Giant Slayer'\u001b[39m,",
                                "    career_path: \u001b[32m'Apprentice Artisan, Troll Slayer, Giant Slayer'\u001b[39m,",
                                "    status: \u001b[32m'Brass 2'\u001b[39m,",
                                "    age: \u001b[32m'59'\u001b[39m,",
                                "    height: \u001b[32m'4.8'\u001b[39m,",
                                "    hair: \u001b[32m'Mid-Brown (Dyed Orange)'\u001b[39m,",
                                "    eyes: \u001b[32m'Amber'\u001b[39m,",
                                "    skin_color: \u001b[32m'Ruddy'\u001b[39m,",
                                "    mother: \u001b[32m'Ulnva Harinsdotr'\u001b[39m,",
                                "    father: \u001b[32m'Hrolf the Patient'\u001b[39m,",
                                "    siblings: \u001b[32m'1 Brother'\u001b[39m,",
                                "    couple: \u001b[32m'Wife and family dead'\u001b[39m,",
                                "    birthplace: \u001b[32m'Karak Angaraz,Grey Mountains'\u001b[39m,",
                                "    background_story: \u001b[32m'Gunnar was a jewelsmith before tragedy hit, leaving leaving his daughter and two sons dead. He swore the Slayer oath immediately and has regretted it ever since, though he will never admit it. He now seeks his death in the most honourable fashion he can muster, but frequently lapses into melancholia and drink when he fails, which gets in the way of the fate-illed duty he must complete. He fell in with Salundra after a drunken night in Ubersreik four years ago, and he found he really liked the boisterous captain, for all she was Human. Given his life had little meaning beyond that, and she seems destined for trouble, he decided to stay with her, and is now fiercely protective of her, often treating her more as a daughter than a companion at arms.'\u001b[39m,",
                                "    motivation: \u001b[32m'1) Killing an impressive foe.\\n'\u001b[39m +",
                                "      \u001b[32m'2) Having a good drink after a hard ﬁght.\\n'\u001b[39m +",
                                "      \u001b[32m'3) Proving he has honour.'\u001b[39m,",
                                "    personal_relations: \u001b[32m'Gunnar will protect Salundra’s life with his own,no matter the outcome. He is very fond of Molli, and will go out of his way to ensure she is safe. Maybe it’s because he’s a witch, but Gunnar just doesn’t trust Ferdinand. Amris can jump oﬀ a cliﬀ for all Gunnar cares.He’s just annoying. Else is his kind of Human: dedicated,devout, and strong.'\u001b[39m,",
                                "    secrets: \u001b[32m'He is hyper ticklish,and secretly loves being tickled. He will never admit this.\\n'\u001b[39m +",
                                "      \u001b[32m'He loves bad jokes, and must pass a Cool Test to not blurt one at the wrong time.\\n'\u001b[39m +",
                                "      \u001b[32m'Gunnar has a bad back. Take a Stunned Condition if he is hit in the Body.\\n'\u001b[39m +",
                                "      \u001b[32m'Gunnar really dislikes artisans of any kind; they remind him of his previous life.\\n'\u001b[39m +",
                                "      \u001b[32m'He will not let a slight on his honour pass. If such happens,he will resolve it.'\u001b[39m,",
                                "    notes: \u001b[32m'nan'\u001b[39m,",
                                "    weapon_skill: \u001b[33m45\u001b[39m,",
                                "    ballistic_skill: \u001b[33m26\u001b[39m,",
                                "    strength: \u001b[33m38\u001b[39m,",
                                "    toughness: \u001b[33m51\u001b[39m,",
                                "    initiative: \u001b[33m34\u001b[39m,",
                                "    agility: \u001b[33m23\u001b[39m,",
                                "    dexterity: \u001b[33m38\u001b[39m,",
                                "    intelligence: \u001b[33m28\u001b[39m,",
                                "    willpower: \u001b[33m52\u001b[39m,",
                                "    fellowship: \u001b[33m18\u001b[39m,",
                                "    fate: \u001b[33m1\u001b[39m,",
                                "    fortune: \u001b[33m1\u001b[39m,",
                                "    resilience: \u001b[33m3\u001b[39m,",
                                "    resolve: \u001b[33m3\u001b[39m,",
                                "    motivation_value: \u001b[33m0\u001b[39m,",
                                "    current_experience: \u001b[33m0\u001b[39m,",
                                "    spent_experience: \u001b[33m2200\u001b[39m,",
                                "    movement: \u001b[33m3\u001b[39m,",
                                "    walk: \u001b[33m6\u001b[39m,",
                                "    run: \u001b[33m12\u001b[39m,",
                                "    art: \u001b[33m38\u001b[39m,",
                                "    athletics: \u001b[33m23\u001b[39m,",
                                "    bribery: \u001b[33m18\u001b[39m,",
                                "    charm: \u001b[33m18\u001b[39m,",
                                "    charm_animal: \u001b[33m52\u001b[39m,",
                                "    climb: \u001b[33m38\u001b[39m,",
                                "    cool: \u001b[33m67\u001b[39m,",
                                "    consume_alcohol: \u001b[33m63\u001b[39m,",
                                "    dodge: \u001b[33m22\u001b[39m,",
                                "    drive: \u001b[33m23\u001b[39m,",
                                "    endurance: \u001b[33m63\u001b[39m,",
                                "    entertain: \u001b[33m18\u001b[39m,",
                                "    gamble: \u001b[33m33\u001b[39m,",
                                "    gossip: \u001b[33m18\u001b[39m,",
                                "    haggle: \u001b[33m18\u001b[39m,",
                                "    intimidate: \u001b[33m43\u001b[39m,",
                                "    intuition: \u001b[33m34\u001b[39m,",
                                "    leadership: \u001b[33m18\u001b[39m,",
                                "    melee_basic: \u001b[33m60\u001b[39m,",
                                "    navigation: \u001b[33m34\u001b[39m,",
                                "    outdoor_survival: \u001b[33m28\u001b[39m,",
                                "    perception: \u001b[33m34\u001b[39m,",
                                "    ride: \u001b[33m23\u001b[39m,",
                                "    row: \u001b[33m38\u001b[39m,",
                                "    stealth: \u001b[33m23\u001b[39m,",
                                "    short_term_ambitions: \u001b[32m'Pending'\u001b[39m,",
                                "    long_term_ambitions: \u001b[32m'Pending'\u001b[39m,",
                                "    psychology: \u001b[32m'Strong'\u001b[39m,",
                                "    corruption: \u001b[33m0\u001b[39m,",
                                "    mutations: \u001b[32m'No mutations'\u001b[39m,",
                                "    gold_crowns: \u001b[33m0\u001b[39m,",
                                "    silver_shillings: \u001b[33m0\u001b[39m,",
                                "    brass_pennies: \u001b[33m0\u001b[39m,",
                                "    max_wounds: \u001b[33m18\u001b[39m,",
                                "    wounds: \u001b[33m18\u001b[39m,",
                                "    right_arm: \u001b[33m0\u001b[39m,",
                                "    left_arm: \u001b[33m0\u001b[39m,",
                                "    head: \u001b[33m0\u001b[39m,",
                                "    right_leg: \u001b[33m0\u001b[39m,",
                                "    left_leg: \u001b[33m0\u001b[39m,",
                                "    body: \u001b[33m0\u001b[39m",
                                "  }",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                " ### Filter journals by campaign"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const queryString = qs.stringify({\n    campaign__uuid: campaign,\n})\n\nlet journalEntries\n\ntry{\n    response = await axios.get(`${apiUrl}journal-entries/?${queryString}`, {auth: { username, password } })\n    journalEntries = response.data.map((item: object) => ({name: item.name, entry_text: item.entry_text, creation_date: item.creation_date}))\n}catch(error){\n    console.log(error.response.status)\n    console.log(error.response.data.detail)\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Filter items by character"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### "
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const queryString = qs.stringify({\n    character: uuidChar,\n})\n\nlet response\n\ntry{\n    response = await axios.get(`${apiUrl}items/?${queryString}`, {auth: { username, password } })\n    journalEntries = response.data.map((item: object) => ({name: item.name, entry_text: item.entry_text, creation_date: item.creation_date}))\n}catch(error){\n    console.log(error.response.status)\n    console.log(error.response.data.detail)\n}"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "response.data"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  {",
                                "    user: \u001b[32m'ricardo'\u001b[39m,",
                                "    character: \u001b[32m'e8bbe74c-1b52-47d1-84b7-9a105c66186c'\u001b[39m,",
                                "    name: \u001b[32m'Clothes'\u001b[39m,",
                                "    uuid: \u001b[32m'2823a935-a952-439d-9f9d-61dfae5383ea'\u001b[39m,",
                                "    creation_date: \u001b[32m'2022-04-05T11:51:23.233607-05:00'\u001b[39m,",
                                "    last_updated: \u001b[32m'2022-04-05T11:51:23.233613-05:00'\u001b[39m,",
                                "    description: \u001b[32m''\u001b[39m,",
                                "    item_type: \u001b[32m''\u001b[39m,",
                                "    encumbrance: \u001b[33m0\u001b[39m",
                                "  },",
                                "  {",
                                "    user: \u001b[32m'ricardo'\u001b[39m,",
                                "    character: \u001b[32m'e8bbe74c-1b52-47d1-84b7-9a105c66186c'\u001b[39m,",
                                "    name: \u001b[32m'Tattoos'\u001b[39m,",
                                "    uuid: \u001b[32m'873a4404-5c21-4a98-a190-f8252a408327'\u001b[39m,",
                                "    creation_date: \u001b[32m'2022-04-05T11:51:23.233587-05:00'\u001b[39m,",
                                "    last_updated: \u001b[32m'2022-04-05T11:51:23.233593-05:00'\u001b[39m,",
                                "    description: \u001b[32m''\u001b[39m,",
                                "    item_type: \u001b[32m''\u001b[39m,",
                                "    encumbrance: \u001b[33m0\u001b[39m",
                                "  },",
                                "  {",
                                "    user: \u001b[32m'ricardo'\u001b[39m,",
                                "    character: \u001b[32m'e8bbe74c-1b52-47d1-84b7-9a105c66186c'\u001b[39m,",
                                "    name: \u001b[32m'Flask of Spirits'\u001b[39m,",
                                "    uuid: \u001b[32m'eb0367af-dc58-4e4b-9c15-ea1051fa9f00'\u001b[39m,",
                                "    creation_date: \u001b[32m'2022-04-05T11:51:23.233566-05:00'\u001b[39m,",
                                "    last_updated: \u001b[32m'2022-04-05T11:51:23.233572-05:00'\u001b[39m,",
                                "    description: \u001b[32m''\u001b[39m,",
                                "    item_type: \u001b[32m''\u001b[39m,",
                                "    encumbrance: \u001b[33m0\u001b[39m",
                                "  },",
                                "  {",
                                "    user: \u001b[32m'ricardo'\u001b[39m,",
                                "    character: \u001b[32m'e8bbe74c-1b52-47d1-84b7-9a105c66186c'\u001b[39m,",
                                "    name: \u001b[32m'Grease'\u001b[39m,",
                                "    uuid: \u001b[32m'b5d0d191-5010-49ff-8ba8-bd2350939943'\u001b[39m,",
                                "    creation_date: \u001b[32m'2022-04-05T11:51:23.233529-05:00'\u001b[39m,",
                                "    last_updated: \u001b[32m'2022-04-05T11:51:23.233547-05:00'\u001b[39m,",
                                "    description: \u001b[32m''\u001b[39m,",
                                "    item_type: \u001b[32m''\u001b[39m,",
                                "    encumbrance: \u001b[33m0\u001b[39m",
                                "  }",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "let urlWithBasePath = \"https://wfrp-api.s3.amazonaws.com/\";\nlet resultUrl = urlWithBasePath.replace(/^http[s]?:\\/\\/.+?\\//, ''); // resultUrl => www.facebook.com\n// const test = axios.get('https://wfrp-api.s3.amazonaws.com/media/ubersreik.jpg?AWSAccessKeyId=AKIAYL5POFDX7AB3CXHG&Signature=FX%2F0EKK%2FzEvziAZfkUyQ0jn6Kt8%3D&Expires=1649629721')"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const staticUrl='wfrp-api.s3.amazonaws.com/'\nconst staticFolder='media/'\nconst urlBase = staticUrl + staticFolder\nconst imgUrl = \"https://wfrp-api.s3.amazonaws.com/media/ubersreik.jpg?AWSAccessKeyId=AKIAYL5POFDX7AB3CXHG&Signature=GyXUHaigYteSsCdsJxoj0vwmyQM%3D&Expires=1649630371\"\nconst media_name = imgUrl.split(urlBase).slice(-1)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const image = axios.get(imgUrl, {responseType: 'arraybuffer'}).then(response => Buffer.from(response.data, 'binary'))"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "media_name"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'ubersreik.jpg?AWSAccessKeyId=AKIAYL5POFDX7AB3CXHG&Signature=GyXUHaigYteSsCdsJxoj0vwmyQM%3D&Expires=1649630371'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "image"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  status: \u001b[33m200\u001b[39m,",
                                "  statusText: \u001b[32m'OK'\u001b[39m,",
                                "  headers: {",
                                "    \u001b[32m'x-amz-id-2'\u001b[39m: \u001b[32m'U36vnTQx3AqsYevrVQo0hN0zCUhjFzSnsX888w/P9FEkZQfslYn3poYb8ORyDWy2FVFyIKjPbIs='\u001b[39m,",
                                "    \u001b[32m'x-amz-request-id'\u001b[39m: \u001b[32m'RHHX9B4E94KFK795'\u001b[39m,",
                                "    date: \u001b[32m'Sat, 09 Apr 2022 22:42:38 GMT'\u001b[39m,",
                                "    \u001b[32m'last-modified'\u001b[39m: \u001b[32m'Sat, 09 Apr 2022 18:19:29 GMT'\u001b[39m,",
                                "    etag: \u001b[32m'\"f90c1305816fec37845f0e8e89cddf58\"'\u001b[39m,",
                                "    \u001b[32m'cache-control'\u001b[39m: \u001b[32m'public, max-age: 86400, immutable'\u001b[39m,",
                                "    \u001b[32m'accept-ranges'\u001b[39m: \u001b[32m'bytes'\u001b[39m,",
                                "    \u001b[32m'content-type'\u001b[39m: \u001b[32m'image/jpg'\u001b[39m,",
                                "    server: \u001b[32m'AmazonS3'\u001b[39m,",
                                "    \u001b[32m'content-length'\u001b[39m: \u001b[32m'568832'\u001b[39m,",
                                "    connection: \u001b[32m'close'\u001b[39m",
                                "  },",
                                "  config: {",
                                "    transitional: {",
                                "      silentJSONParsing: \u001b[33mtrue\u001b[39m,",
                                "      forcedJSONParsing: \u001b[33mtrue\u001b[39m,",
                                "      clarifyTimeoutError: \u001b[33mfalse\u001b[39m",
                                "    },",
                                "    adapter: \u001b[36m[Function: httpAdapter]\u001b[39m,",
                                "    transformRequest: [",
                                "      \u001b[36m[Function: transformRequest]\u001b[39m",
                                "    ],",
                                "    transformResponse: [",
                                "      \u001b[36m[Function: transformResponse]\u001b[39m",
                                "    ],",
                                "    timeout: \u001b[33m0\u001b[39m,",
                                "    xsrfCookieName: \u001b[32m'XSRF-TOKEN'\u001b[39m,",
                                "    xsrfHeaderName: \u001b[32m'X-XSRF-TOKEN'\u001b[39m,",
                                "    maxContentLength: \u001b[33m-1\u001b[39m,",
                                "    maxBodyLength: \u001b[33m-1\u001b[39m,",
                                "    validateStatus: \u001b[36m[Function: validateStatus]\u001b[39m,",
                                "    headers: {",
                                "      Accept: \u001b[32m'application/json, text/plain, */*'\u001b[39m,",
                                "      \u001b[32m'User-Agent'\u001b[39m: \u001b[32m'axios/0.26.1'\u001b[39m",
                                "    },",
                                "    responseType: \u001b[32m'arraybuffer'\u001b[39m,",
                                "    method: \u001b[32m'get'\u001b[39m,",
                                "    url: \u001b[32m'https://wfrp-api.s3.amazonaws.com/media/ubersreik.jpg?AWSAccessKeyId=AKIAYL5POFDX7AB3CXHG&Signature=GyXUHaigYteSsCdsJxoj0vwmyQM%3D&Expires=1649630371'\u001b[39m,",
                                "    data: \u001b[90mundefined\u001b[39m",
                                "  },",
                                "  request: \u001b[36m<ref *1>\u001b[39m ClientRequest {",
                                "    _events: [Object: null prototype] {",
                                "      abort: \u001b[36m[Function (anonymous)]\u001b[39m,",
                                "      aborted: \u001b[36m[Function (anonymous)]\u001b[39m,",
                                "      connect: \u001b[36m[Function (anonymous)]\u001b[39m,",
                                "      error: \u001b[36m[Function (anonymous)]\u001b[39m,",
                                "      socket: \u001b[36m[Function (anonymous)]\u001b[39m,",
                                "      timeout: \u001b[36m[Function (anonymous)]\u001b[39m,",
                                "      prefinish: \u001b[36m[Function: requestOnPrefinish]\u001b[39m",
                                "    },",
                                "    _eventsCount: \u001b[33m7\u001b[39m,",
                                "    _maxListeners: \u001b[90mundefined\u001b[39m,",
                                "    outputData: [],",
                                "    outputSize: \u001b[33m0\u001b[39m,",
                                "    writable: \u001b[33mtrue\u001b[39m,",
                                "    destroyed: \u001b[33mtrue\u001b[39m,",
                                "    _last: \u001b[33mtrue\u001b[39m,",
                                "    chunkedEncoding: \u001b[33mfalse\u001b[39m,",
                                "    shouldKeepAlive: \u001b[33mfalse\u001b[39m,",
                                "    maxRequestsOnConnectionReached: \u001b[33mfalse\u001b[39m,",
                                "    _defaultKeepAlive: \u001b[33mtrue\u001b[39m,",
                                "    useChunkedEncodingByDefault: \u001b[33mfalse\u001b[39m,",
                                "    sendDate: \u001b[33mfalse\u001b[39m,",
                                "    _removedConnection: \u001b[33mfalse\u001b[39m,",
                                "    _removedContLen: \u001b[33mfalse\u001b[39m,",
                                "    _removedTE: \u001b[33mfalse\u001b[39m,",
                                "    _contentLength: \u001b[33m0\u001b[39m,",
                                "    _hasBody: \u001b[33mtrue\u001b[39m,",
                                "    _trailer: \u001b[32m''\u001b[39m,",
                                "    finished: \u001b[33mtrue\u001b[39m,",
                                "    _headerSent: \u001b[33mtrue\u001b[39m,",
                                "    _closed: \u001b[33mtrue\u001b[39m,",
                                "    socket: TLSSocket {",
                                "      _tlsOptions: \u001b[36m[Object]\u001b[39m,",
                                "      _secureEstablished: \u001b[33mtrue\u001b[39m,",
                                "      _securePending: \u001b[33mfalse\u001b[39m,",
                                "      _newSessionPending: \u001b[33mfalse\u001b[39m,",
                                "      _controlReleased: \u001b[33mtrue\u001b[39m,",
                                "      secureConnecting: \u001b[33mfalse\u001b[39m,",
                                "      _SNICallback: \u001b[1mnull\u001b[22m,",
                                "      servername: \u001b[32m'wfrp-api.s3.amazonaws.com'\u001b[39m,",
                                "      alpnProtocol: \u001b[33mfalse\u001b[39m,",
                                "      authorized: \u001b[33mtrue\u001b[39m,",
                                "      authorizationError: \u001b[1mnull\u001b[22m,",
                                "      encrypted: \u001b[33mtrue\u001b[39m,",
                                "      _events: \u001b[36m[Object: null prototype]\u001b[39m,",
                                "      _eventsCount: \u001b[33m9\u001b[39m,",
                                "      connecting: \u001b[33mfalse\u001b[39m,",
                                "      _hadError: \u001b[33mfalse\u001b[39m,",
                                "      _parent: \u001b[1mnull\u001b[22m,",
                                "      _host: \u001b[32m'wfrp-api.s3.amazonaws.com'\u001b[39m,",
                                "      _readableState: \u001b[36m[ReadableState]\u001b[39m,",
                                "      _maxListeners: \u001b[90mundefined\u001b[39m,",
                                "      _writableState: \u001b[36m[WritableState]\u001b[39m,",
                                "      allowHalfOpen: \u001b[33mfalse\u001b[39m,",
                                "      _sockname: \u001b[1mnull\u001b[22m,",
                                "      _pendingData: \u001b[1mnull\u001b[22m,",
                                "      _pendingEncoding: \u001b[32m''\u001b[39m,",
                                "      server: \u001b[90mundefined\u001b[39m,",
                                "      _server: \u001b[1mnull\u001b[22m,",
                                "      ssl: \u001b[1mnull\u001b[22m,",
                                "      _requestCert: \u001b[33mtrue\u001b[39m,",
                                "      _rejectUnauthorized: \u001b[33mtrue\u001b[39m,",
                                "      parser: \u001b[1mnull\u001b[22m,",
                                "      _httpMessage: \u001b[36m[Circular *1]\u001b[39m,",
                                "      write: \u001b[36m[Function: writeAfterFIN]\u001b[39m,",
                                "      [\u001b[32mSymbol(res)\u001b[39m]: \u001b[1mnull\u001b[22m,",
                                "      [\u001b[32mSymbol(verified)\u001b[39m]: \u001b[33mtrue\u001b[39m,",
                                "      [\u001b[32mSymbol(pendingSession)\u001b[39m]: \u001b[1mnull\u001b[22m,",
                                "      [\u001b[32mSymbol(async_id_symbol)\u001b[39m]: \u001b[33m1952\u001b[39m,",
                                "      [\u001b[32mSymbol(kHandle)\u001b[39m]: \u001b[1mnull\u001b[22m,",
                                "      [\u001b[32mSymbol(kSetNoDelay)\u001b[39m]: \u001b[33mfalse\u001b[39m,",
                                "      [\u001b[32mSymbol(lastWriteQueueSize)\u001b[39m]: \u001b[33m0\u001b[39m,",
                                "      [\u001b[32mSymbol(timeout)\u001b[39m]: \u001b[1mnull\u001b[22m,",
                                "      [\u001b[32mSymbol(kBuffer)\u001b[39m]: \u001b[1mnull\u001b[22m,",
                                "      [\u001b[32mSymbol(kBufferCb)\u001b[39m]: \u001b[1mnull\u001b[22m,",
                                "      [\u001b[32mSymbol(kBufferGen)\u001b[39m]: \u001b[1mnull\u001b[22m,",
                                "      [\u001b[32mSymbol(kCapture)\u001b[39m]: \u001b[33mfalse\u001b[39m,",
                                "      [\u001b[32mSymbol(kBytesRead)\u001b[39m]: \u001b[33m569260\u001b[39m,",
                                "      [\u001b[32mSymbol(kBytesWritten)\u001b[39m]: \u001b[33m254\u001b[39m,",
                                "      [\u001b[32mSymbol(connect-options)\u001b[39m]: \u001b[36m[Object]\u001b[39m,",
                                "      [\u001b[32mSymbol(RequestTimeout)\u001b[39m]: \u001b[90mundefined\u001b[39m",
                                "    },",
                                "    _header: \u001b[32m'GET /media/ubersreik.jpg?AWSAccessKeyId=AKIAYL5POFDX7AB3CXHG&Signature=GyXUHaigYteSsCdsJxoj0vwmyQM%3D&Expires=1649630371 HTTP/1.1\\r\\n'\u001b[39m +",
                                "      \u001b[32m'Accept: application/json, text/plain, */*\\r\\n'\u001b[39m +",
                                "      \u001b[32m'User-Agent: axios/0.26.1\\r\\n'\u001b[39m +",
                                "      \u001b[32m'Host: wfrp-api.s3.amazonaws.com\\r\\n'\u001b[39m +",
                                "      \u001b[32m'Connection: close\\r\\n'\u001b[39m +",
                                "      \u001b[32m'\\r\\n'\u001b[39m,",
                                "    _keepAliveTimeout: \u001b[33m0\u001b[39m,",
                                "    _onPendingData: \u001b[36m[Function: nop]\u001b[39m,",
                                "    agent: Agent {",
                                "      _events: \u001b[36m[Object: null prototype]\u001b[39m,",
                                "      _eventsCount: \u001b[33m2\u001b[39m,",
                                "      _maxListeners: \u001b[90mundefined\u001b[39m,",
                                "      defaultPort: \u001b[33m443\u001b[39m,",
                                "      protocol: \u001b[32m'https:'\u001b[39m,",
                                "      options: \u001b[36m[Object: null prototype]\u001b[39m,",
                                "      requests: [Object: null prototype] {},",
                                "      sockets: [Object: null prototype] {},",
                                "      freeSockets: [Object: null prototype] {},",
                                "      keepAliveMsecs: \u001b[33m1000\u001b[39m,",
                                "      keepAlive: \u001b[33mfalse\u001b[39m,",
                                "      maxSockets: \u001b[33mInfinity\u001b[39m,",
                                "      maxFreeSockets: \u001b[33m256\u001b[39m,",
                                "      scheduling: \u001b[32m'lifo'\u001b[39m,",
                                "      maxTotalSockets: \u001b[33mInfinity\u001b[39m,",
                                "      totalSocketCount: \u001b[33m0\u001b[39m,",
                                "      maxCachedSessions: \u001b[33m100\u001b[39m,",
                                "      _sessionCache: \u001b[36m[Object]\u001b[39m,",
                                "      [\u001b[32mSymbol(kCapture)\u001b[39m]: \u001b[33mfalse\u001b[39m",
                                "    },",
                                "    socketPath: \u001b[90mundefined\u001b[39m,",
                                "    method: \u001b[32m'GET'\u001b[39m,",
                                "    maxHeaderSize: \u001b[90mundefined\u001b[39m,",
                                "    insecureHTTPParser: \u001b[90mundefined\u001b[39m,",
                                "    path: \u001b[32m'/media/ubersreik.jpg?AWSAccessKeyId=AKIAYL5POFDX7AB3CXHG&Signature=GyXUHaigYteSsCdsJxoj0vwmyQM%3D&Expires=1649630371'\u001b[39m,",
                                "    _ended: \u001b[33mtrue\u001b[39m,",
                                "    res: IncomingMessage {",
                                "      _readableState: \u001b[36m[ReadableState]\u001b[39m,",
                                "      _events: \u001b[36m[Object: null prototype]\u001b[39m,",
                                "      _eventsCount: \u001b[33m4\u001b[39m,",
                                "      _maxListeners: \u001b[90mundefined\u001b[39m,",
                                "      socket: \u001b[36m[TLSSocket]\u001b[39m,",
                                "      httpVersionMajor: \u001b[33m1\u001b[39m,",
                                "      httpVersionMinor: \u001b[33m1\u001b[39m,",
                                "      httpVersion: \u001b[32m'1.1'\u001b[39m,",
                                "      complete: \u001b[33mtrue\u001b[39m,",
                                "      rawHeaders: \u001b[36m[Array]\u001b[39m,",
                                "      rawTrailers: [],",
                                "      aborted: \u001b[33mfalse\u001b[39m,",
                                "      upgrade: \u001b[33mfalse\u001b[39m,",
                                "      url: \u001b[32m''\u001b[39m,",
                                "      method: \u001b[1mnull\u001b[22m,",
                                "      statusCode: \u001b[33m200\u001b[39m,",
                                "      statusMessage: \u001b[32m'OK'\u001b[39m,",
                                "      client: \u001b[36m[TLSSocket]\u001b[39m,",
                                "      _consuming: \u001b[33mtrue\u001b[39m,",
                                "      _dumped: \u001b[33mfalse\u001b[39m,",
                                "      req: \u001b[36m[Circular *1]\u001b[39m,",
                                "      responseUrl: \u001b[32m'https://wfrp-api.s3.amazonaws.com/media/ubersreik.jpg?AWSAccessKeyId=AKIAYL5POFDX7AB3CXHG&Signature=GyXUHaigYteSsCdsJxoj0vwmyQM%3D&Expires=1649630371'\u001b[39m,",
                                "      redirects: [],",
                                "      [\u001b[32mSymbol(kCapture)\u001b[39m]: \u001b[33mfalse\u001b[39m,",
                                "      [\u001b[32mSymbol(kHeaders)\u001b[39m]: \u001b[36m[Object]\u001b[39m,",
                                "      [\u001b[32mSymbol(kHeadersCount)\u001b[39m]: \u001b[33m22\u001b[39m,",
                                "      [\u001b[32mSymbol(kTrailers)\u001b[39m]: \u001b[1mnull\u001b[22m,",
                                "      [\u001b[32mSymbol(kTrailersCount)\u001b[39m]: \u001b[33m0\u001b[39m,",
                                "      [\u001b[32mSymbol(RequestTimeout)\u001b[39m]: \u001b[90mundefined\u001b[39m",
                                "    },",
                                "    aborted: \u001b[33mfalse\u001b[39m,",
                                "    timeoutCb: \u001b[1mnull\u001b[22m,",
                                "    upgradeOrConnect: \u001b[33mfalse\u001b[39m,",
                                "    parser: \u001b[1mnull\u001b[22m,",
                                "    maxHeadersCount: \u001b[1mnull\u001b[22m,",
                                "    reusedSocket: \u001b[33mfalse\u001b[39m,",
                                "    host: \u001b[32m'wfrp-api.s3.amazonaws.com'\u001b[39m,",
                                "    protocol: \u001b[32m'https:'\u001b[39m,",
                                "    _redirectable: Writable {",
                                "      _writableState: \u001b[36m[WritableState]\u001b[39m,",
                                "      _events: \u001b[36m[Object: null prototype]\u001b[39m,",
                                "      _eventsCount: \u001b[33m3\u001b[39m,",
                                "      _maxListeners: \u001b[90mundefined\u001b[39m,",
                                "      _options: \u001b[36m[Object]\u001b[39m,",
                                "      _ended: \u001b[33mtrue\u001b[39m,",
                                "      _ending: \u001b[33mtrue\u001b[39m,",
                                "      _redirectCount: \u001b[33m0\u001b[39m,",
                                "      _redirects: [],",
                                "      _requestBodyLength: \u001b[33m0\u001b[39m,",
                                "      _requestBodyBuffers: [],",
                                "      _onNativeResponse: \u001b[36m[Function (anonymous)]\u001b[39m,",
                                "      _currentRequest: \u001b[36m[Circular *1]\u001b[39m,",
                                "      _currentUrl: \u001b[32m'https://wfrp-api.s3.amazonaws.com/media/ubersreik.jpg?AWSAccessKeyId=AKIAYL5POFDX7AB3CXHG&Signature=GyXUHaigYteSsCdsJxoj0vwmyQM%3D&Expires=1649630371'\u001b[39m,",
                                "      [\u001b[32mSymbol(kCapture)\u001b[39m]: \u001b[33mfalse\u001b[39m",
                                "    },",
                                "    [\u001b[32mSymbol(kCapture)\u001b[39m]: \u001b[33mfalse\u001b[39m,",
                                "    [\u001b[32mSymbol(kNeedDrain)\u001b[39m]: \u001b[33mfalse\u001b[39m,",
                                "    [\u001b[32mSymbol(corked)\u001b[39m]: \u001b[33m0\u001b[39m,",
                                "    [\u001b[32mSymbol(kOutHeaders)\u001b[39m]: [Object: null prototype] {",
                                "      accept: \u001b[36m[Array]\u001b[39m,",
                                "      \u001b[32m'user-agent'\u001b[39m: \u001b[36m[Array]\u001b[39m,",
                                "      host: \u001b[36m[Array]\u001b[39m",
                                "    }",
                                "  },",
                                "  data: <Buffer ff d8 ff e0 00 10 4a 46 49 46 00 01 01 01 00 48 00 48 00 00 ff e1 25 06 45 78 69 66 00 00 49 49 2a 00 08 00 00 00 06 00 1a 01 05 00 01 00 00 00 56 00 ... 568782 more bytes>",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}