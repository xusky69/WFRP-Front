{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "const axios = require('axios');\nconst qs = require('qs')"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Parameters"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const username = 'admin'\nconst password = '123'\nconst campaign = '58a53f18-22b6-4d01-84d8-95b037bfd036'\nconst apiUrl = 'http://localhost:8000/'"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Basic auth test"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// try {\n//     const response = await axios.get(apiUrl)\n//     console.log(response.data)\n// } catch (error) {\n//     console.log(error.response.status)\n//     console.log(error.response.data.detail)\n// }\n\ntry {\n    const response = await axios.get(apiUrl, {auth: { username, password } })\n    console.log(response.data)\n} catch (error) {\n    console.log(error.response.status)\n    console.log(error.response.data.detail)\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{",
                                "  campaigns: 'http://localhost:8000/campaigns/',",
                                "  'journal-entries': 'http://localhost:8000/journal-entries/',",
                                "  'playable-characters': 'http://localhost:8000/playable-characters/',",
                                "  items: 'http://localhost:8000/items/',",
                                "  talents: 'http://localhost:8000/talents/',",
                                "  spells: 'http://localhost:8000/spells/'",
                                "}",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Get campaign data"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let response\ntry {\n    response = await axios.get(`${apiUrl}campaigns/?${campaign}`, {auth: { username, password } })\n} catch (error) {\n    console.log(error.response.status)\n    console.log(error.response.data.detail)\n}"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "response.data"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  {",
                                "    master: \u001b[32m'admin'\u001b[39m,",
                                "    name: \u001b[32m'Celephais'\u001b[39m,",
                                "    uuid: \u001b[32m'58a53f18-22b6-4d01-84d8-95b037bfd036'\u001b[39m,",
                                "    description: \u001b[32m'test'\u001b[39m,",
                                "    creation_date: \u001b[32m'2022-03-29T13:37:00.605147-05:00'\u001b[39m,",
                                "    last_updated: \u001b[32m'2022-03-29T13:37:00.605166-05:00'\u001b[39m",
                                "  }",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const campaignData = {\n    master: response.data[0].master,\n    name: response.data[0].name,\n    description: response.data[0].description\n  }\n\ncampaignData"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  master: \u001b[32m'admin'\u001b[39m,",
                                "  name: \u001b[32m'Celephais'\u001b[39m,",
                                "  description: \u001b[32m'test'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Filter character by campaign"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "\nconst queryString = qs.stringify({\n    campaign__uuid: campaign,\n    // user__username: username,\n})\n\ntry{\n    response = await axios.get(`${apiUrl}playable-characters/?${queryString}`, {auth: { username, password } })\n}catch(error){\n    console.log(error.response.status)\n    console.log(error.response.data.detail)\n}"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "response.data[0]"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  user: \u001b[32m'admin'\u001b[39m,",
                                "  campaign: \u001b[32m'58a53f18-22b6-4d01-84d8-95b037bfd036'\u001b[39m,",
                                "  uuid: \u001b[32m'8533edd5-63c9-4613-bacb-a0fcf24cd7e2'\u001b[39m,",
                                "  creation_date: \u001b[32m'2022-03-29T13:37:30.243917-05:00'\u001b[39m,",
                                "  last_updated: \u001b[32m'2022-03-29T13:37:30.243933-05:00'\u001b[39m,",
                                "  name: \u001b[32m'Gunnar'\u001b[39m,",
                                "  species: \u001b[32m'Dwarf'\u001b[39m,",
                                "  career: \u001b[32m'Slayer'\u001b[39m,",
                                "  career_level: \u001b[32m''\u001b[39m,",
                                "  career_path: \u001b[32m''\u001b[39m,",
                                "  status: \u001b[32m''\u001b[39m,",
                                "  age: \u001b[32m''\u001b[39m,",
                                "  height: \u001b[32m''\u001b[39m,",
                                "  hair: \u001b[32m''\u001b[39m,",
                                "  eyes: \u001b[32m''\u001b[39m,",
                                "  skin_color: \u001b[32m''\u001b[39m,",
                                "  mother: \u001b[32m''\u001b[39m,",
                                "  father: \u001b[32m''\u001b[39m,",
                                "  siblings: \u001b[32m''\u001b[39m,",
                                "  couple: \u001b[32m''\u001b[39m,",
                                "  birthplace: \u001b[32m''\u001b[39m,",
                                "  background_story: \u001b[32m''\u001b[39m,",
                                "  personal_relations: \u001b[32m''\u001b[39m,",
                                "  secrets: \u001b[32m''\u001b[39m,",
                                "  notes: \u001b[32m''\u001b[39m,",
                                "  weapon_skill: \u001b[33m0\u001b[39m,",
                                "  ballistic_skill: \u001b[33m0\u001b[39m,",
                                "  strength: \u001b[33m0\u001b[39m,",
                                "  toughness: \u001b[33m0\u001b[39m,",
                                "  initiative: \u001b[33m0\u001b[39m,",
                                "  agility: \u001b[33m0\u001b[39m,",
                                "  dexterity: \u001b[33m0\u001b[39m,",
                                "  intelligence: \u001b[33m0\u001b[39m,",
                                "  willpower: \u001b[33m0\u001b[39m,",
                                "  fellowship: \u001b[33m0\u001b[39m,",
                                "  fate: \u001b[33m0\u001b[39m,",
                                "  fortune: \u001b[33m0\u001b[39m,",
                                "  resilience: \u001b[33m0\u001b[39m,",
                                "  resolve: \u001b[33m0\u001b[39m,",
                                "  motivation: \u001b[33m0\u001b[39m,",
                                "  current: \u001b[33m0\u001b[39m,",
                                "  spent: \u001b[33m0\u001b[39m,",
                                "  movement: \u001b[33m0\u001b[39m,",
                                "  walk: \u001b[33m0\u001b[39m,",
                                "  run: \u001b[33m0\u001b[39m,",
                                "  art: \u001b[33m0\u001b[39m,",
                                "  athletics: \u001b[33m0\u001b[39m,",
                                "  bribery: \u001b[33m0\u001b[39m,",
                                "  charm: \u001b[33m0\u001b[39m,",
                                "  charm_animal: \u001b[33m0\u001b[39m,",
                                "  climb: \u001b[33m0\u001b[39m,",
                                "  cool: \u001b[33m0\u001b[39m,",
                                "  consume_alcohol: \u001b[33m0\u001b[39m,",
                                "  dodge: \u001b[33m0\u001b[39m,",
                                "  drive: \u001b[33m0\u001b[39m,",
                                "  endurance: \u001b[33m0\u001b[39m,",
                                "  entertain: \u001b[33m0\u001b[39m,",
                                "  gamble: \u001b[33m0\u001b[39m,",
                                "  gossip: \u001b[33m0\u001b[39m,",
                                "  haggle: \u001b[33m0\u001b[39m,",
                                "  intimidate: \u001b[33m0\u001b[39m,",
                                "  intuition: \u001b[33m0\u001b[39m,",
                                "  leadership: \u001b[33m0\u001b[39m,",
                                "  melee_basic: \u001b[33m0\u001b[39m,",
                                "  navigation: \u001b[33m0\u001b[39m,",
                                "  outdoor_survival: \u001b[33m0\u001b[39m,",
                                "  perception: \u001b[33m0\u001b[39m,",
                                "  ride: \u001b[33m0\u001b[39m,",
                                "  row: \u001b[33m0\u001b[39m,",
                                "  stealth: \u001b[33m0\u001b[39m,",
                                "  short_term_ambitions: \u001b[32m''\u001b[39m,",
                                "  long_term_ambitions: \u001b[32m''\u001b[39m,",
                                "  psychology: \u001b[32m''\u001b[39m,",
                                "  corruption: \u001b[33m0\u001b[39m,",
                                "  mutations: \u001b[32m''\u001b[39m,",
                                "  wealth: \u001b[33m0\u001b[39m,",
                                "  wounds: \u001b[33m0\u001b[39m,",
                                "  right_arm: \u001b[33m0\u001b[39m,",
                                "  left_arm: \u001b[33m0\u001b[39m,",
                                "  head: \u001b[33m0\u001b[39m,",
                                "  right_leg: \u001b[33m0\u001b[39m,",
                                "  left_leg: \u001b[33m0\u001b[39m,",
                                "  body: \u001b[33m0\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                " ### Filter journals by campaign"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const queryString = qs.stringify({\n    campaign__uuid: campaign,\n})\n\nlet journalEntries\n\ntry{\n    response = await axios.get(`${apiUrl}journal-entries/?${queryString}`, {auth: { username, password } })\n    journalEntries = response.data.map((item: object) => ({name: item.name, entry_text: item.entry_text, creation_date: item.creation_date}))\n}catch(error){\n    console.log(error.response.status)\n    console.log(error.response.data.detail)\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### "
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}